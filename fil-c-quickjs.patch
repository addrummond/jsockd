diff --git a/Makefile b/Makefile
index ba64923..50d12cf 100644
--- a/Makefile
+++ b/Makefile
@@ -226,15 +226,15 @@ ifeq ($(CROSS_PREFIX),)
 ifndef CONFIG_ASAN
 ifndef CONFIG_MSAN
 ifndef CONFIG_UBSAN
-PROGS+=examples/hello examples/test_fib
+#PROGS+=examples/hello examples/test_fib
 # no -m32 option in qjsc
 ifndef CONFIG_M32
 ifndef CONFIG_WIN32
-PROGS+=examples/hello_module
+#PROGS+=examples/hello_module
 endif
 endif
 ifdef CONFIG_SHARED_LIBS
-PROGS+=examples/fib.so examples/point.so
+#PROGS+=examples/fib.so examples/point.so
 endif
 endif
 endif
diff --git a/cutils.c b/cutils.c
index 52ff164..f1fbffa 100644
--- a/cutils.c
+++ b/cutils.c
@@ -638,4 +638,11 @@ void rqsort(void *base, size_t nmemb, size_t size, cmp_f cmp, void *opaque)
     }
 }
 
+void patched_rqsort(void *base, size_t nmemb, size_t size,
+            int (*cmp)(const void *, const void *, void *),
+            void *arg)
+{
+    qsort_r(base, nmemb, size, cmp, arg);
+}
+
 #endif
diff --git a/cutils.h b/cutils.h
index 094a8f1..b633aeb 100644
--- a/cutils.h
+++ b/cutils.h
@@ -454,4 +454,8 @@ static inline int isfp16zero(uint16_t v)
     return (v & 0x7FFF) == 0;
 }
 
+void patched_rqsort(void *base, size_t nmemb, size_t size,
+            int (*cmp)(const void *, const void *, void *),
+            void *arg);
+
 #endif  /* CUTILS_H */
diff --git a/libregexp.c b/libregexp.c
index 118d950..1c253ab 100644
--- a/libregexp.c
+++ b/libregexp.c
@@ -2722,10 +2722,11 @@ static int lre_poll_timeout(REExecContext *s)
 }
 
 /* return 1 if match, 0 if not match or < 0 if error. */
-static intptr_t lre_exec_backtrack(REExecContext *s, uint8_t **capture,
+// Alex D: Add new out_ret parameter so that we don't return pointers as ints on some return paths and displease Fil-C.
+static int lre_exec_backtrack(REExecContext *s, uint8_t **capture,
                                    StackInt *stack, int stack_len,
                                    const uint8_t *pc, const uint8_t *cptr,
-                                   BOOL no_recurse)
+                                   BOOL no_recurse, uint8_t **out_ret)
 {
     int opcode, ret;
     int cbuf_type;
@@ -2742,8 +2743,10 @@ static intptr_t lre_exec_backtrack(REExecContext *s, uint8_t **capture,
         case REOP_match:
             {
                 REExecState *rs;
-                if (no_recurse)
-                    return (intptr_t)cptr;
+                if (no_recurse) {
+                    *out_ret = (uint8_t *)cptr;
+                    return 1;
+                }
                 ret = 1;
                 goto recurse;
             no_match:
@@ -3122,14 +3125,15 @@ static intptr_t lre_exec_backtrack(REExecContext *s, uint8_t **capture,
                 for(;;) {
                     if (lre_poll_timeout(s))
                         return LRE_RET_TIMEOUT;
+                    uint8_t *out_ret = NULL;
                     res = lre_exec_backtrack(s, capture, stack, stack_len,
-                                             pc1, cptr, TRUE);
+                                             pc1, cptr, TRUE, &out_ret);
                     if (res == LRE_RET_MEMORY_ERROR ||
                         res == LRE_RET_TIMEOUT)
                         return res;
                     if (!res)
                         break;
-                    cptr = (uint8_t *)res;
+                    cptr = out_ret;
                     q++;
                     if (q >= quant_max && quant_max != INT32_MAX)
                         break;
@@ -3197,8 +3201,9 @@ int lre_exec(uint8_t **capture,
         }
     }
 
+    uint8_t *out_ret;
     ret = lre_exec_backtrack(s, capture, stack_buf, 0, bc_buf + RE_HEADER_LEN,
-                             cptr, FALSE);
+                             cptr, FALSE, &out_ret);
     lre_realloc(s->opaque, s->state_stack, 0);
     return ret;
 }
diff --git a/quickjs.c b/quickjs.c
index 92a7297..1fd52a9 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -54,6 +54,8 @@
 #else
 #define DIRECT_DISPATCH  1
 #endif
+#undef DIRECT_DISPATCH
+#define DIRECT_DISPATCH 0
 
 #if defined(__APPLE__)
 #define MALLOC_OVERHEAD  0
@@ -76,6 +78,7 @@
 /* enable stack limitation */
 #define CONFIG_STACK_CHECK
 #endif
+#undef CONFIG_STACK_CHECK // doesn't play well with Fil-C
 
 
 /* dump object free */
@@ -888,7 +891,7 @@ typedef struct JSProperty {
         struct {            /* JS_PROP_AUTOINIT */
             /* in order to use only 2 pointers, we compress the realm
                and the init function pointer */
-            uintptr_t realm_and_id; /* realm and init_id (JS_AUTOINIT_ID_x)
+            void *realm_and_id; /* realm and init_id (JS_AUTOINIT_ID_x)
                                        in the 2 low bits */
             void *opaque;
         } init;
@@ -5595,12 +5598,13 @@ JSValue JS_NewCFunctionData(JSContext *ctx, JSCFunctionData *func,
 
 static JSContext *js_autoinit_get_realm(JSProperty *pr)
 {
-    return (JSContext *)(pr->u.init.realm_and_id & ~3);
+    return (JSContext *)((uintptr_t)pr->u.init.realm_and_id & ~3);
 }
 
 static JSAutoInitIDEnum js_autoinit_get_id(JSProperty *pr)
 {
-    return pr->u.init.realm_and_id & 3;
+
+    return (uintptr_t)pr->u.init.realm_and_id & 3;
 }
 
 static void js_autoinit_free(JSRuntime *rt, JSProperty *pr)
@@ -8271,7 +8275,7 @@ static int __exception JS_GetOwnPropertyNamesInternal(JSContext *ctx,
     assert(sym_index == atom_count);
 
     if (num_keys_count != 0 && !num_sorted) {
-        rqsort(tab_atom, num_keys_count, sizeof(tab_atom[0]), num_keys_cmp,
+        patched_rqsort(tab_atom, num_keys_count, sizeof(tab_atom[0]), num_keys_cmp,
                ctx);
     }
     *ptab = tab_atom;
@@ -10011,10 +10015,10 @@ static int JS_DefineAutoInitProperty(JSContext *ctx, JSValueConst this_obj,
     pr = add_property(ctx, p, prop, (flags & JS_PROP_C_W_E) | JS_PROP_AUTOINIT);
     if (unlikely(!pr))
         return -1;
-    pr->u.init.realm_and_id = (uintptr_t)JS_DupContext(ctx);
-    assert((pr->u.init.realm_and_id & 3) == 0);
+    pr->u.init.realm_and_id = JS_DupContext(ctx);
+    assert(((uintptr_t)pr->u.init.realm_and_id & 3) == 0);
     assert(id <= 3);
-    pr->u.init.realm_and_id |= id;
+    pr->u.init.realm_and_id = (void*)((uintptr_t)pr->u.init.realm_and_id | id);
     pr->u.init.opaque = opaque;
     return TRUE;
 }
@@ -29397,7 +29401,7 @@ static JSValue js_build_module_ns(JSContext *ctx, JSModuleDef *m)
     }
 
     /* sort the exported names */
-    rqsort(s->exported_names, s->exported_names_count,
+    patched_rqsort(s->exported_names, s->exported_names_count,
            sizeof(s->exported_names[0]), exported_names_cmp, ctx);
 
     for(i = 0; i < s->exported_names_count; i++) {
@@ -30307,7 +30311,7 @@ static JSValue js_async_module_execution_fulfilled(JSContext *ctx, JSValueConst
     }
 
     /* sort by increasing async_evaluation timestamp */
-    rqsort(exec_list->tab, exec_list->count, sizeof(exec_list->tab[0]),
+    patched_rqsort(exec_list->tab, exec_list->count, sizeof(exec_list->tab[0]),
            exec_module_list_cmp, NULL);
 
     for(i = 0; i < exec_list->count; i++) {
@@ -42177,7 +42181,7 @@ static JSValue js_array_sort(JSContext *ctx, JSValueConst this_val,
         array[pos].pos = i;
         pos++;
     }
-    rqsort(array, pos, sizeof(*array), js_array_cmp_generic, &asc);
+    patched_rqsort(array, pos, sizeof(*array), js_array_cmp_generic, &asc);
     if (asc.exception)
         goto exception;
 
@@ -56903,7 +56907,7 @@ static JSValue js_typed_array_sort(JSContext *ctx, JSValueConst this_val,
             for(i = 0; i < len; i++)
                 array_idx[i] = i;
             tsc.elt_size = elt_size;
-            rqsort(array_idx, len, sizeof(array_idx[0]),
+            patched_rqsort(array_idx, len, sizeof(array_idx[0]),
                    js_TA_cmp_generic, &tsc);
             if (tsc.exception) {
                 if (tsc.exception == 1)
@@ -56953,7 +56957,7 @@ static JSValue js_typed_array_sort(JSContext *ctx, JSValueConst this_val,
             }
             js_free(ctx, array_idx);
         } else {
-            rqsort(p->u.array.u.ptr, len, elt_size, cmpfun, &tsc);
+            patched_rqsort(p->u.array.u.ptr, len, elt_size, cmpfun, &tsc);
             if (tsc.exception)
                 return JS_EXCEPTION;
         }
